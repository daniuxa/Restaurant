// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.Dal.Contexts;

#nullable disable

namespace Restaurant.Dal.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20230523201819_AddOtherTeas")]
    partial class AddOtherTeas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Restaurant.Dal.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.CommentToOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfOrder")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.ToTable("CommentsToOrder");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.MenuPosition", b =>
                {
                    b.Property<Guid>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PositionId");

                    b.ToTable("MenuPositions");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfOrder")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.PositionInOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("MenuPostionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "MenuPostionId");

                    b.HasIndex("MenuPostionId");

                    b.ToTable("PositionsInOrders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Table", b =>
                {
                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfPlaces")
                        .HasColumnType("int");

                    b.HasKey("TableNumber");

                    b.ToTable("Tables");

                    b.HasCheckConstraint("CHK_PK_TableNumber", "TableNumber > 0");

                    b.HasData(
                        new
                        {
                            TableNumber = 1,
                            AmountOfPlaces = 1
                        },
                        new
                        {
                            TableNumber = 2,
                            AmountOfPlaces = 2
                        },
                        new
                        {
                            TableNumber = 3,
                            AmountOfPlaces = 3
                        },
                        new
                        {
                            TableNumber = 4,
                            AmountOfPlaces = 4
                        });
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.DeliveryOrder", b =>
                {
                    b.HasBaseType("Restaurant.Dal.Entities.Order");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DeliveryOrders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Dish", b =>
                {
                    b.HasBaseType("Restaurant.Dal.Entities.MenuPosition");

                    b.Property<string>("TypeOfDish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            PositionId = new Guid("06e0d7c2-9fbb-4c5e-b1cf-3951bba9316e"),
                            Name = "Hamburger menu 1",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/06e0d7c2-9fbb-4c5e-b1cf-3951bba9316e?updatedAt=1684869326662",
                            Price = 400m,
                            TypeOfDish = "Burger",
                            Weight = 350.0
                        },
                        new
                        {
                            PositionId = new Guid("94ba0fbc-76ec-4eac-9b48-5ff5859da457"),
                            Name = "Hamburger menu 2",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/94ba0fbc-76ec-4eac-9b48-5ff5859da457?updatedAt=1684869350144",
                            Price = 450m,
                            TypeOfDish = "Burger",
                            Weight = 400.0
                        },
                        new
                        {
                            PositionId = new Guid("860617fd-d341-41d2-a494-d982e8ae1f84"),
                            Name = "Hamburger menu 3",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/860617fd-d341-41d2-a494-d982e8ae1f84?updatedAt=1684869385003",
                            Price = 550m,
                            TypeOfDish = "Burger",
                            Weight = 450.0
                        },
                        new
                        {
                            PositionId = new Guid("a680749e-8e43-4877-9fe4-cb7b3caf130d"),
                            Name = "Hamburger menu 4",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/a680749e-8e43-4877-9fe4-cb7b3caf130d?updatedAt=1684828898277",
                            Price = 500m,
                            TypeOfDish = "Burger",
                            Weight = 400.0
                        },
                        new
                        {
                            PositionId = new Guid("78506416-6bc4-469e-9b03-1e2cf5b708a3"),
                            Name = "Steak",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/78506416-6bc4-469e-9b03-1e2cf5b708a3?updatedAt=1684828867102",
                            Price = 600m,
                            TypeOfDish = "Meat",
                            Weight = 500.0
                        },
                        new
                        {
                            PositionId = new Guid("349ac30a-ffa1-4c2f-a871-a172100d5dd7"),
                            Name = "Kebab",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/349ac30a-ffa1-4c2f-a871-a172100d5dd7?updatedAt=1684828595451",
                            Price = 400m,
                            TypeOfDish = "Meat",
                            Weight = 350.0
                        },
                        new
                        {
                            PositionId = new Guid("d0d023f5-aea2-4b19-9b18-f949b02ea87d"),
                            Name = "Nugets",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/d0d023f5-aea2-4b19-9b18-f949b02ea87d?updatedAt=1684828605346",
                            Price = 300m,
                            TypeOfDish = "Meat",
                            Weight = 250.0
                        },
                        new
                        {
                            PositionId = new Guid("c5d0bd03-f244-4429-b59c-181268153359"),
                            Name = "Salmon",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/c5d0bd03-f244-4429-b59c-181268153359?updatedAt=1684828638160",
                            Price = 600m,
                            TypeOfDish = "Fish",
                            Weight = 250.0
                        },
                        new
                        {
                            PositionId = new Guid("7bdc8f1d-6677-4065-8425-218e4c8bac36"),
                            Name = "Fried with tomato souce",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/7bdc8f1d-6677-4065-8425-218e4c8bac36?updatedAt=1684828713325",
                            Price = 700m,
                            TypeOfDish = "Fish",
                            Weight = 250.0
                        },
                        new
                        {
                            PositionId = new Guid("2a287245-da79-4f6f-9bca-29c4fd1c8b05"),
                            Name = "Grilled fish",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/2a287245-da79-4f6f-9bca-29c4fd1c8b05?updatedAt=1684828669643",
                            Price = 500m,
                            TypeOfDish = "Fish",
                            Weight = 250.0
                        },
                        new
                        {
                            PositionId = new Guid("fa744911-5fc6-486a-9cd4-3a09c539a31e"),
                            Name = "Easter fish",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/fa744911-5fc6-486a-9cd4-3a09c539a31e?updatedAt=1684828749243",
                            Price = 650m,
                            TypeOfDish = "Fish",
                            Weight = 250.0
                        },
                        new
                        {
                            PositionId = new Guid("177b95a1-8ead-4fb1-8510-9bec5c89c16a"),
                            Name = "Dorado",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/177b95a1-8ead-4fb1-8510-9bec5c89c16a?updatedAt=1684828620582",
                            Price = 400m,
                            TypeOfDish = "Fish",
                            Weight = 250.0
                        },
                        new
                        {
                            PositionId = new Guid("a23bcec4-d07c-4e6a-a131-43a064066304"),
                            Name = "Chef summer fish",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/a23bcec4-d07c-4e6a-a131-43a064066304?updatedAt=1684828784696",
                            Price = 500m,
                            TypeOfDish = "Fish",
                            Weight = 250.0
                        });
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Drink", b =>
                {
                    b.HasBaseType("Restaurant.Dal.Entities.MenuPosition");

                    b.Property<string>("TypeOfDrink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            PositionId = new Guid("cdc8e3c4-42c5-47e9-932d-5d196c04351e"),
                            Name = "Espresso",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/cdc8e3c4-42c5-47e9-932d-5d196c04351e?updatedAt=1684867378345",
                            Price = 100m,
                            TypeOfDrink = "Coffe",
                            Volume = 30.0
                        },
                        new
                        {
                            PositionId = new Guid("eb80cd9d-6586-4d76-ae91-a8e6bf5c8b5e"),
                            Name = "Cappuccino",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/eb80cd9d-6586-4d76-ae91-a8e6bf5c8b5e",
                            Price = 130m,
                            TypeOfDrink = "Coffe",
                            Volume = 50.0
                        },
                        new
                        {
                            PositionId = new Guid("cc26f172-64bd-4b14-aeca-2ffe1f7d4d63"),
                            Name = "Latte",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/cc26f172-64bd-4b14-aeca-2ffe1f7d4d63",
                            Price = 140m,
                            TypeOfDrink = "Coffe",
                            Volume = 50.0
                        },
                        new
                        {
                            PositionId = new Guid("47d6710b-32e5-429d-8723-e7971f6bef17"),
                            Name = "Orange juice",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/47d6710b-32e5-429d-8723-e7971f6bef17",
                            Price = 130m,
                            TypeOfDrink = "Juice",
                            Volume = 200.0
                        },
                        new
                        {
                            PositionId = new Guid("ab10d367-35f4-4da6-ab7f-01413eddd8d4"),
                            Name = "Apple juice",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/ab10d367-35f4-4da6-ab7f-01413eddd8d4",
                            Price = 130m,
                            TypeOfDrink = "Juice",
                            Volume = 200.0
                        },
                        new
                        {
                            PositionId = new Guid("2708e10a-b0cd-41b9-8ed2-0a8de5d864dd"),
                            Name = "Pineapple juice",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/2708e10a-b0cd-41b9-8ed2-0a8de5d864dd",
                            Price = 130m,
                            TypeOfDrink = "Juice",
                            Volume = 200.0
                        },
                        new
                        {
                            PositionId = new Guid("b46d3334-e53f-4dfa-bea9-3a1aef72d5d1"),
                            Name = "Black tea",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/b46d3334-e53f-4dfa-bea9-3a1aef72d5d1",
                            Price = 100m,
                            TypeOfDrink = "Tea",
                            Volume = 150.0
                        },
                        new
                        {
                            PositionId = new Guid("ce5db9df-0c47-4bfc-9d5f-1412cf7dc856"),
                            Name = "Green tea",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/ce5db9df-0c47-4bfc-9d5f-1412cf7dc856",
                            Price = 150m,
                            TypeOfDrink = "Tea",
                            Volume = 150.0
                        },
                        new
                        {
                            PositionId = new Guid("17a3c19e-1575-4a69-ae89-46059cce8dc7"),
                            Name = "Herbal tea",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/17a3c19e-1575-4a69-ae89-46059cce8dc7",
                            Price = 100m,
                            TypeOfDrink = "Tea",
                            Volume = 150.0
                        });
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.InRestaurantOrder", b =>
                {
                    b.HasBaseType("Restaurant.Dal.Entities.Order");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasIndex("TableNumber");

                    b.ToTable("InRestaurantOrders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Wine", b =>
                {
                    b.HasBaseType("Restaurant.Dal.Entities.MenuPosition");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBottle")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfWine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("Wines");

                    b.HasData(
                        new
                        {
                            PositionId = new Guid("2c3279d1-2e2b-40cf-80ab-cc2e0167f809"),
                            Name = "Quinta Bons Ventos",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/2c3279d1-2e2b-40cf-80ab-cc2e0167f809?updatedAt=1684863128831",
                            Price = 300m,
                            Brand = "Ventos",
                            Country = "Portugal",
                            IsBottle = true,
                            RegionName = "Lisboa",
                            TypeOfWine = "Red",
                            Year = 2015
                        },
                        new
                        {
                            PositionId = new Guid("f2b2b4a2-6930-4d60-bb14-ec740ea92164"),
                            Name = "Vidigueira Syrah",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/f2b2b4a2-6930-4d60-bb14-ec740ea92164?updatedAt=1684863172948",
                            Price = 550m,
                            Brand = "Syrah",
                            Country = "Portugal",
                            IsBottle = true,
                            RegionName = "Alentejo",
                            TypeOfWine = "Red",
                            Year = 2012
                        },
                        new
                        {
                            PositionId = new Guid("b6a6574f-d702-49c3-829d-c00ac75ede7d"),
                            Name = "Quinta Camarate Doce",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/b6a6574f-d702-49c3-829d-c00ac75ede7d?updatedAt=1684863224821",
                            Price = 750m,
                            Brand = "Doce",
                            Country = "Portugal",
                            IsBottle = true,
                            RegionName = "Setúbal",
                            TypeOfWine = "White",
                            Year = 2019
                        },
                        new
                        {
                            PositionId = new Guid("378aae16-d4f0-4f78-8232-ac7dd40d0687"),
                            Name = "Alentejo Herdade Sobroso Cellar Selection",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/378aae16-d4f0-4f78-8232-ac7dd40d0687?updatedAt=1684863364089",
                            Price = 1200m,
                            Brand = "Alentejo Herdade",
                            Country = "Portugal",
                            IsBottle = true,
                            RegionName = "Alentejo",
                            TypeOfWine = "White",
                            Year = 2016
                        },
                        new
                        {
                            PositionId = new Guid("ace050bf-ecf4-4444-9509-310f996676d3"),
                            Name = "Els Bassotets",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/ace050bf-ecf4-4444-9509-310f996676d3?updatedAt=1684863752948",
                            Price = 1100m,
                            Brand = "Bassotets",
                            Country = "Spain",
                            IsBottle = true,
                            RegionName = "Conca de Barberà",
                            TypeOfWine = "White",
                            Year = 2022
                        },
                        new
                        {
                            PositionId = new Guid("17a90d7e-9726-4d7f-bf96-7ca47080c27c"),
                            Name = "Davide Observador",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/17a90d7e-9726-4d7f-bf96-7ca47080c27c?updatedAt=1684863814548",
                            Price = 2500m,
                            Brand = "Observador",
                            Country = "Spain",
                            IsBottle = true,
                            RegionName = "Rías Baixas",
                            TypeOfWine = "White",
                            Year = 2022
                        },
                        new
                        {
                            PositionId = new Guid("ccec7ad3-2928-4ca9-963e-1d9b705ff1be"),
                            Name = "Valdaya Mirum",
                            PhotoLink = "https://ik.imagekit.io/Salivon/Menu/ccec7ad3-2928-4ca9-963e-1d9b705ff1be?updatedAt=1684863955912",
                            Price = 3200m,
                            Brand = "Mirum",
                            Country = "Spain",
                            IsBottle = true,
                            RegionName = "Ribera del Duero",
                            TypeOfWine = "White",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.CommentToOrder", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Order", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.PositionInOrder", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.MenuPosition", "MenuPosition")
                        .WithMany("PositionsInOrders")
                        .HasForeignKey("MenuPostionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Dal.Entities.Order", "Order")
                        .WithMany("PositionsInOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuPosition");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.DeliveryOrder", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.Order", null)
                        .WithOne()
                        .HasForeignKey("Restaurant.Dal.Entities.DeliveryOrder", "OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Dish", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.MenuPosition", null)
                        .WithOne()
                        .HasForeignKey("Restaurant.Dal.Entities.Dish", "PositionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Drink", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.MenuPosition", null)
                        .WithOne()
                        .HasForeignKey("Restaurant.Dal.Entities.Drink", "PositionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.InRestaurantOrder", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.Order", null)
                        .WithOne()
                        .HasForeignKey("Restaurant.Dal.Entities.InRestaurantOrder", "OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Dal.Entities.Table", "Table")
                        .WithMany("InRestaurantOrders")
                        .HasForeignKey("TableNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Wine", b =>
                {
                    b.HasOne("Restaurant.Dal.Entities.MenuPosition", null)
                        .WithOne()
                        .HasForeignKey("Restaurant.Dal.Entities.Wine", "PositionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.MenuPosition", b =>
                {
                    b.Navigation("PositionsInOrders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Order", b =>
                {
                    b.Navigation("PositionsInOrders");
                });

            modelBuilder.Entity("Restaurant.Dal.Entities.Table", b =>
                {
                    b.Navigation("InRestaurantOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
